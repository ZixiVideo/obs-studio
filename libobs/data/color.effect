float srgb_linear_to_nonlinear_channel(float u)
{
	return (u <= 0.0031308) ? (12.92 * u) : ((1.055 * pow(u, 1.0 / 2.4)) - 0.055);
}

float3 srgb_linear_to_nonlinear(float3 v)
{
	return float3(srgb_linear_to_nonlinear_channel(v.r), srgb_linear_to_nonlinear_channel(v.g), srgb_linear_to_nonlinear_channel(v.b));
}

float srgb_nonlinear_to_linear_channel(float u)
{
	return (u <= 0.04045) ? (u / 12.92) : pow((u + 0.055) / 1.055, 2.4);
}

float3 srgb_nonlinear_to_linear(float3 v)
{
	return float3(srgb_nonlinear_to_linear_channel(v.r), srgb_nonlinear_to_linear_channel(v.g), srgb_nonlinear_to_linear_channel(v.b));
}

float3 rec709_to_rec2020(float3 v)
{
	float r = dot(v, float3(0.6274040f, 0.3292820f, 0.0433136f));
	float g = dot(v, float3(0.0690970f, 0.9195400f, 0.0113612f));
	float b = dot(v, float3(0.0163916f, 0.0880132f, 0.8955950f));
	return float3(r, g, b);
}

float3 rec2020_to_rec709(float3 v)
{
	float r = dot(v, float3(1.6604910, -0.5876411, -0.0728499));
	float g = dot(v, float3(-0.1245505, 1.1328999, -0.0083494));
	float b = dot(v, float3(-0.0181508, -0.1005789, 1.1187297));
	return float3(r, g, b);
}

float reinhard_channel(float x)
{
	return x / (x + 1.0);
}

float3 reinhard(float3 rgb)
{
	return float3(reinhard_channel(rgb.r), reinhard_channel(rgb.g), reinhard_channel(rgb.b));
}

float linear_to_st2084_channel(float x)
{
	return pow((0.8359375 + 18.8515625 * pow(abs(x), 0.1593017578)) / (1.0 + 18.6875 * pow(abs(x), 0.1593017578)), 78.84375);
}

float3 linear_to_st2084(float3 rgb)
{
	return float3(linear_to_st2084_channel(rgb.r), linear_to_st2084_channel(rgb.g), linear_to_st2084_channel(rgb.b));
}

float st2084_to_linear_channel(float u)
{
	return pow(abs(max(pow(abs(u), 1.0 / 78.84375) - 0.8359375, 0.0) / (18.8515625 - 18.6875 * pow(abs(u), 1.0 / 78.84375))), 1.0 / 0.1593017578);
}

float3 st2084_to_linear(float3 v)
{
	return float3(st2084_to_linear_channel(v.r), st2084_to_linear_channel(v.g), st2084_to_linear_channel(v.b));
}

float linear_to_hlg_channel(float u)
{
	float ln2_i = 1.0 / log(2.0);
	float m = 0.17883277 / ln2_i;
    return (u <= (1.0 /12.0)) ? sqrt(3.0 * u) : ((log2((12.0 * u) - 0.28466892) * m) + 0.55991073);
}

float3 linear_to_hlg(float3 rgb)
{
	rgb = saturate(rgb);
	float yd = (0.2627 * rgb.r) + (0.678 * rgb.g) + (0.0593 * rgb.b);

	// pow(0, exponent) can lead to NaN, use smallest positive normal number
	yd = max(6.10352e-5, yd);

	rgb *= pow(yd, -1.0 / 6.0);
	return float3(linear_to_hlg_channel(rgb.r), linear_to_hlg_channel(rgb.g), linear_to_hlg_channel(rgb.b));
}

float hlg_to_linear_channel(float u)
{
	float ln2_i = 1.0 / log(2.0);
	float m = ln2_i / 0.17883277;
	float a = -ln2_i * 0.55991073 / 0.17883277;
	return (u <= 0.5) ? ((u * u) / 3.0) : ((exp2(u * m + a) + 0.28466892) / 12.0);
}

float3 hlg_to_linear(float3 v)
{
	float3 rgb = float3(hlg_to_linear_channel(v.r), hlg_to_linear_channel(v.g), hlg_to_linear_channel(v.b));
	float ys = dot(rgb, float3(0.2627, 0.678, 0.0593));
	rgb *= pow(ys, 0.2);
	return rgb;
}
